module {{ subsys.getName() }}(
    input clk,
    input rstn{% if subsys.intfs|length > 0 %}, {% endif %}

{% for intf in subsys.intfs %}
    {% set last_bus = loop.last %}
    // Bus: {{ intf.sig_prefix }}{{ intf.name }}
    {% for s in intf.signals %}
    {% set last_sig = loop.last %}
    {{ intf.getSignalVerilogType(s) }} [{{ s.width-1 }}:0] {{ s.name }}{% if not (last_sig and last_bus) %}, {% endif %}

    {% endfor %}
{% endfor %}
);
{% for module in subsys.modules + [subsys.intc] %} {# TODO add interconnects #}
{% for s in module.signals %}
{% if s.is_clk or s.is_rst %}
    wire   __s__{{ module.node.inst_name }}_{{ s.name }};
    assign __s__{{ module.node.inst_name }}_{{ s.name }} = {{ s.name }}; 
{% endif %}
{% endfor %}
{% endfor %}

/*======================================================================================== TODO different Widths
*===================== Interconnect ports ================================================
*========================================================================================*/

    localparam N_ENDPOINTS = {{ subsys.getNumEndpoints() }};
    localparam N_INTC_SLAVE_PORTS = {{ subsys.intc.slave_ports|length }};

{% for intf in subsys.intc.intfs %}
    {% for s in intf.signals %} {# TODO move to interconnect #}
    wire [{{ s.width - 1 }}:0] {{ subsys.intc.node.inst_name }}_{{ s.name }};
    {% endfor %}

{% endfor %}

/*========================================================================================
*===================== Instantiate Modules ===============================================
*========================================================================================*/

{% for module in subsys.modules %}
    {% for intf in module.intfs %}
        {% for s in intf.signals %}
    wire [{{ s.width }}:0] {{ module.node.inst_name }}_{{ s.name }}; // {{ module.node.inst_name }}  {{ intf.name }}
        {% endfor %}
    {% endfor %}

    // Instantiate {{ module.node.get_path() }}
    {% set params = module.getHdlParameters() %}
    {{ module.getOrigTypeName() }} {% if params|length > 0 %}#(
        {% for param in params %}
            .{{ param.name }}({{ param.get_value() }}){% if not loop.last %}, {% endif %}

        {% endfor %}
        ) {% endif %}{{ module.node.inst_name }} (
        {% for s in module.signals %}
            .{{ s.name }}(__s__{{ module.node.inst_name }}_{{ s.name }}),
        {% endfor %}
        {% for intf in module.intfs %}
            {% for s in intf.signals %}
            .{{ s.name }}({{ module.node.inst_name }}_{{ s.name }}){% if not loop.last %}, {% endif %}

            {% endfor %}
        {% endfor %}

    );

{% endfor %}


/*======================================================================================== TODO different Widths
*============== Connect Interconnect Slave ports to start points =========================
*========================================================================================*/

{% set intc_slv_port = subsys.intc.getIntcCommonSlavePort() %} {# TODO move to interconnect #}
{% for intf in subsys.getStartpoints() %}
    // Connecting Intf {{ intf.name }} with signal prefix {{ intf.sig_prefix }} DATA_WIDTH: {{ intf.data_width }} ADDR_WIDTH {{ intf.addr_width }} modport: {{ intf.modport }}
    {% set bus_idx = loop.index-1 %}
    {% for s in intc_slv_port.signals %}
        {% set sig_idx = (not s.isShared())|int * bus_idx %}
        {% set mod_s = intf.findSignal(s.basename) %}
        {% if s.isOnlyMosi() %}
    assign {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  mod_s.width }} +: {{ mod_s.width }}] = {{ intf.parent_node.inst_name }}_{{ mod_s.name }}; // Master -> Interconnect
        {% elif s.isOnlyMiso() %}
    assign {{ intf.parent_node.inst_name }}_{{ mod_s.name }} = {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  mod_s.width }} +: {{ mod_s.width }}]; // Interconnect -> Master
        {% else %}
    assign {{ intf.parent_node.inst_name }}_{{ mod_s.name }} = {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  mod_s.width }} +: {{ mod_s.width }}]; // TODO CAREFUL ERROR BIDIRECTIONAL????
        {% endif %}
    {% endfor %}
{% endfor %}

/*======================================================================================== TODO different Widths
*============== Connect Interconnect Master ports to endpoints ===========================
*========================================================================================*/

{% set intc_mst_port = subsys.intc.getIntcCommonMasterPort() %} {# TODO move to interconnect #}
{% for intf in subsys.intc.master_ports %}
    // Connecting Intf {{ intf.name }} with signal prefix {{ intf.sig_prefix }} DATA_WIDTH: {{ intf.data_width }} ADDR_WIDTH {{ intf.addr_width }} modport: {{ intf.modport }}
    {% set bus_idx = loop.index-1 %}
    {% for s in intc_mst_port.signals %}
        {% set sig_idx = (not s.isShared())|int * bus_idx %}
        {% set mod_s = intf.findSignal(s.basename) %}
        {% if s.isOnlyMiso() %}
    assign {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx * mod_s.width }} +: {{ mod_s.width }}] = {{ intf.parent_node.inst_name }}_{{ mod_s.name }}; // Slave -> Interconnect
        {% elif s.isOnlyMosi() %}
    assign {{ intf.parent_node.inst_name }}_{{ mod_s.name }} = {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  mod_s.width }} +: {{ mod_s.width }}]; // Interconnect -> Slave
        {% else %}
    assign {{ intf.parent_node.inst_name }}_{{ mod_s.name }} = {{ subsys.intc.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  mod_s.width }} +: {{ mod_s.width }}]; // TODO CAREFUL ERROR BIDIRECTIONAL????
        {% endif %}
    {% endfor %}
{% endfor %}


/*========================================================================================
*===================== Interconnect instantiations =======================================
*========================================================================================*/
    // Instantiate interconnect {{ subsys.intc.node.inst_name }}
    {% set intc_params = subsys.intc.getHdlParameters() %}
    {{ subsys.intc.node.type_name }}{% if intc_params|length > 0 %} #(
        {% for param in intc_params %}
        .{{ param.name }}({{ param.get_value() }}){% if not loop.last %}, {% endif %}

        {% endfor %}
    ) {% endif %} {{ subsys.intc.node.inst_name }} (
    {% for s in subsys.intc.node.signals() %}
        .{{ s.inst_name }}(__s__{{ subsys.intc.node.inst_name }}_{{ s.inst_name }}),
    {% endfor %}
    {% for intf in subsys.intc.intfs %}
        {% set intf_last = loop.last %}
        {% for s in intf.signals %}
        .{{ intf.sig_prefix }}{{ s.basename }}({{ subsys.intc.node.inst_name }}_{{ s.name }}){% if not (loop.last and intf_last) %}, {% endif %}

        {% endfor %}
    {% endfor %}

    );
        
{# /*======================================================================================== #}
{# *===================== Adapters instantiation ============================================ #}
{# *========================================================================================*/ #}
{# {% set subs_cnt = subsys.slaves|length %} #}
{# {% for subs in subsys.subsystems %} #}
{#     {% for signal in subs.bus.signals %} #}
{#     wire [{{ signal.width-1 }}:0] adapt_{{ signal.name }}; #}
{#     {% endfor %} #}
{#  #}
{#     {% if subsys.isAdapterNeeded(subsys.bus, subs.bus) %} #}
{#         // Instantiating adapter {{ subsys.getAdapterName(subsys.bus, subs.bus) }} #}
{#     {{ subsys.getAdapterName(subsys.bus, subs.bus) }} #( #}
{#         .ADDR_WIDTH({{ subsys.bus.addr_width }}), #}
{#         .DATA_WIDTH({{ subsys.bus.data_width }}) #}
{#     ) {{ subsys.getAdapterName(subsys.bus, subs.bus) }}( #}
{#         .clk(clk), #}
{#         .rstn(rstn), #}
{#  #}
{#     // {{ subsys.bus.name }} signals #}
{#     {% for signal in subsys.bus.signals %} #}
{#         {% set sig_idx = (not signal.isShared())|int * subs_cnt %} #}
{#         .s_{{ signal.name }}(ep_{{ signal.name }}[{{ sig_idx * signal.width }} +: {{ signal.width }}]), #}
{#     {% endfor %} #}
{#     // {{ subs.bus.name }} signals #}
{#     {% for signal in subs.bus.signals %} #}
{#         .m_{{ signal.name }}(adapt_{{ signal.name }}){% if not loop.last %}, {% endif %} #}
{#  #}
{#     {% endfor %} #}
{#     ); #}
{#     {% else %} #}
{#     {% for s in subs.bus.signals %} #}
{#         {% set sig_idx = (not s.isShared())|int * subs_cnt %} #}
{#         {% if s.isOnlyMiso() %} #}
{#     assign ep_{{ s.name }}[{{ sig_idx * s.width }} +: {{ s.width }}] = adapt_{{ s.name }}; #}
{#         {% elif s.isOnlyMosi() %} #}
{#     assign adapt_{{ s.name }} = ep_{{ s.name }}[{{ sig_idx * s.width }} +: {{ s.width }}]; #}
{#         {% else %} #}
{#     assign adapt_{{ s.name }} = ep_{{ s.name }}[{{ sig_idx * s.width }} +: {{ s.width }}]; // TODO check what if bidir #}
{#         {% endif %} #}
{#     {% endfor %} #}
{#     {% endif %} #}
{#     {% set subs_cnt = subs_cnt + 1 %} #}
{# {% endfor %} #}
{# /*======================================================================================== #}
{# *===================== Subsystems instantiations ========================================= #}
{# *========================================================================================*/ #}
{#  #}
{# {% for subs in subsys.subsystems %} #}
{#     {% set subs_cnt = loop.index-1 %} #}
{#     {{ subs.root|getName }} {{ subs.root.inst_name }} ( #}
{#     {% for signal in subs.root|getSignals %} #}
{#         .{{ signal.name }}(__s__{{ subs.root.inst_name }}_{{ signal.name }}), #}
{#     {% endfor %} #}
{#  #}
{#     {% for signal in subs.bus.signals %} #}
{#     {% if not signal.ss and not signal.miso %} {% set sig_idx = 0 %} {% else %} {% set sig_idx = subs_cnt %} {% endif %} #}
{#       .s_{{ signal.name }}(adapt_{{ signal.name }}){% if not loop.last %}, {% endif %} #}
{#  #}
{#     {% endfor %} #}
{#  #}
{#     ); #}
{# {% endfor %} #}

endmodule
