{% set subsys_params = subsys.getHdlParameters() %}
module {{ subsys.getOrigTypeName() }} {% if subsys_params|length > 0 %} #(
{% for param in subsys_params %}
    parameter {{ param['name'] }} = {{ param['value'] }}{% if not loop.last%},{% endif %}

{% endfor %}
){% endif %}
(
{% for s in subsys.signals %}
    {{ s.verilogDir }} [{{ s.width-1 }}:0] {{ s.name }}{% if (not loop.last) or (subsys.ports|length > 0) %},{% endif %}

{% endfor %}

{% for intf in subsys.ports %}
    {% set last_bus = loop.last %}
    // Bus: {{ intf.prefix }}{{ intf.type }}
    {% for s in intf.signals %}
    {% set last_sig = loop.last %}
    {{ s.verilogDir }} [{{ s.width-1 }}:0] {{ s.name }}{% if not (last_sig and last_bus) %},{% endif %}

    {% endfor %}
{% endfor %}
);

{% for module in subsys.getAllModules() %}
{% for s in module.signals %}
{% if s.is_clk %}
    wire   {{ module.getSigVerilogName(s) }};
    assign {{ module.getSigVerilogName(s) }} = {{ subsys.getClkOrRst(s).name }};
{% endif %}
{% if s.is_rst %}
    {% set rst_sig = subsys.getClkOrRst(s) %}
    wire   {{ module.getSigVerilogName(s) }};
    assign {{ module.getSigVerilogName(s) }} = {% if s.activehigh != rst_sig.activehigh %}!{% endif %}{{ rst_sig.name }};
{% endif %}
{% endfor %}

{% endfor %}


/*========================================================================================
*===================== Instantiate Modules ===============================================
*========================================================================================*/

{% for module in subsys.modules %}
    {% for port in module.ports %}
        {% for s in port.signals %}
    wire [{{ s.width-1 }}:0] {{ module.node.inst_name }}_{{ s.name }}; // {{ module.node.inst_name }}  {{ port.type }}
        {% endfor %}
    {% endfor %}

    // Instantiate {{ module.node.get_path() }}
    {% set params = module.getHdlParameters() %}
    {{ module.getOrigTypeName() }} {% if params|length > 0 %}#(
        {% for param in params %}
            .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
        ) {% endif %}{{ module.node.inst_name }} (
        {% for s in module.signals %}
            .{{ s.name }}({{ module.getSigVerilogName(s) }}){% if (not loop.last) or (module.ports|length > 0) %},{% endif %}

        {% endfor %}

        {% for port in module.ports %}
            {% set last_port = loop.last %}
            {% for s in port.signals %}
            .{{ s.name }}({{ module.getSigVerilogName(s, port) }}){% if not (loop.last and last_port) %},{% endif %}

            {% endfor %}
        {% endfor %}
    );

{% endfor %}

/*========================================================================================
*===================== Interconnects instantiation =======================================
*========================================================================================*/

{% for intc in subsys.intcs %}

    // Interconnect Ports

{% for intf in [intc.getSlavePorts()[0]] %}
    {% for s in intf.signals %}
    {% set sig_arr_len = intf.arr_dim  %}
    wire [{{ s.width * sig_arr_len - 1 }}:0] {{ intf.module.node.inst_name }}_{{ s.name }};
    {% endfor %}

{% endfor %}
{% for intf in [intc.getMasterPorts()[0]] %}
    {% for s in intf.signals %}
    {% set sig_arr_len = intf.arr_dim * (not s.isShared()) or 1 %}
    wire [{{ s.width * sig_arr_len - 1 }}:0] {{ intf.module.node.inst_name }}_{{ s.name }};
    {% endfor %}

{% endfor %}

    {# // Interconnect signals #}
    {# {% for s in intc.signals %} #}
    {# wire [{{ s.width -1}}:0] {{ intc.getSigVerilogName(s) }}; #}
    {# {% endfor %} #}


// Instantiate interconnect {{ intc.node.inst_name }}
    {% set intc_params = intc.getHdlParameters() %}
    {{ intc.node.orig_type_name }}{% if intc_params|length > 0 %} #(
        {% for param in intc_params %}
        .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
    ) {% endif %} {{ intc.node.inst_name }} (
    {% for s in intc.signals %}
        .{{ s.name }}({{ intc.getSigVerilogName(s) }}),
    {% endfor %}

    {% for intf in [intc.getMasterPorts()[0], intc.getSlavePorts()[0]] %}
        {% set intf_last = loop.last %}
        {% for s in intf.signals %}
        .{{ s.name }}({{ intf.module.node.inst_name }}_{{ s.name }}){% if not (loop.last and intf_last) %},{% endif %}

        {% endfor %}

    {% endfor %}

    );

    {% set intc_slv_port = intc.getSlavePorts()[0] %}
    {% set intc_mst_port = intc.getMasterPorts()[0] %}
    // Interconnect slave ports
    {% for intf in intc.ext_slv_ports %}
        {% set intf_idx = loop.index-1 %}
        {% if intf.module.node == subsys.node %}
            {% set mod_prefix = "" %}
        {% else %}
            {% set mod_prefix = intf.module.node.inst_name + "_" %}
        {% endif %}
        {% for s in intf.signals %}
            {% set sig_idx = intf_idx %}
            {% set intc_sig = intc_slv_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}] = {{ mod_prefix }}{{ s.name }};
            {% elif s.miso %}
    assign {{ mod_prefix }}{{ s.name }} = {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}];
            {% endif %}
        {% endfor %}

    {% endfor %}

    // Interconnect master ports
    {% for intf in intc.ext_mst_ports %}
        {% set intf_idx = loop.index-1 %}
        {% if intf.module.node == subsys.node %}
            {% set mod_prefix = "" %}
        {% else %}
            {% set mod_prefix = intf.module.node.inst_name + "_" %}
        {% endif %}
        {% for s in intf.signals %}
            {% set sig_idx = (not s.isShared())|int * intf_idx %}
            {% set intc_sig = intc_mst_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ mod_prefix }}{{ s.name }} = {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}];
            {% elif s.miso %}
    assign {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}] = {{ mod_prefix }}{{ s.name }};
            {% endif %}
        {% endfor %}

    {% endfor %}


{% endfor %}

/*========================================================================================
*===================== Adapters instantiation ============================================
*========================================================================================*/

{% for apath in subsys.adapter_paths %}
    {% for adapter in apath.adapters %}
        {% set adapter_idx = loop.index %}
        {% if loop.first %}
            {% set prev_adapter = adapter %}
            {% set prev_mst_port = prev_adapter.slv_port %}
        {% else %}
            {% set prev_adapter = apath.adapters[adapter_idx-2] %}
            {% set prev_mst_port = prev_adapter.mst_port %}
        {% endif %}
    // Adapter: {{ adapter.node.inst_name }}
        {% if loop.first %}
            {% for s in adapter.slv_port.signals %}
    wire [{{ s.width - 1}}:0] {{ adapter.node.inst_name }}_{{ s.name }};
            {% endfor %}
        {% endif %}

        {% for s in adapter.mst_port.signals %}
    wire [{{ s.width - 1}}:0] {{ adapter.node.inst_name }}_{{ s.name }};
        {% endfor %}


    // Instantiate Adapter: {{ adapter.node.inst_name }}

    {% set params = adapter.getHdlParameters() %}
    {{ adapter.getOrigTypeName() }} {% if params|length > 0 %}#(
        {% for param in params %}
            .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
        ) {% endif %}{{ adapter.node.inst_name }} (
        {% for s in adapter.signals %}
            .{{ s.name }}({{ adapter.getSigVerilogName(s) }}){% if (not loop.last) or (adapter.intfs|length > 0) %},{% endif %}

        {% endfor %}

        {% set slv_intf = apath.intfChain[adapter_idx-1] %}
        {% for s in slv_intf.signals %}
        .{{ adapter.slv_port.findSignal(s).name }}({{ prev_adapter.node.inst_name }}_{{ prev_mst_port.findSignal(s).name }}),
        {% endfor %}

        {% for s in apath.intfChain[adapter_idx].signals %}
        .{{ adapter.mst_port.findSignal(s).name }}({{ adapter.node.inst_name}}_{{ adapter.mst_port.findSignal(s).name }}){% if not loop.last %},{% endif %}

        {% endfor %}

    );

    {% if loop.last %}
        {% for s in apath.adapt_to.signals %}
            {% set adapter_sig = adapter.mst_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ apath.adapt_to.module.node.inst_name }}_{{ s.name }} = {{ adapter.node.inst_name }}_{{ adapter_sig.name }};
            {% elif s.miso %}
    assign {{ adapter.node.inst_name }}_{{ adapter_sig.name }} = {{ apath.adapt_to.module.node.inst_name }}_{{ s.name }};
    {# assign {{ intf.module.node.inst_name }}_{{ s.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}] = {{ intc.node.inst_name }}_{{ intc_sig.name }}; #}
            {% endif %}
        {% endfor %}

    {% endif %}

    {% endfor %}

{% endfor %}

endmodule
