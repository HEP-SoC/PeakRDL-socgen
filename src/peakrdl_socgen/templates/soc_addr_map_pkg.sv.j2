package soc_addr_map_pkg;

  {# import addr_map_rule_pkg::*; #}

  typedef struct packed {
    logic [31:0] idx;
    logic [31:0] start_addr;
    logic [31:0] end_addr;
  } addr_map_rule_t;

  {# localparam logic[31:0] ERROR_START_ADDRESS = 32'hBADACCE5;
  localparam logic[31:0] ERROR_SIZE = 32'h00000001;
  localparam logic[31:0] ERROR_END_ADDRESS = ERROR_START_ADDRESS + ERROR_SIZE;
  localparam logic[31:0] ERROR_IDX = 32'd0; #}

  {%- for subsys in subsystems %}
  {%- for intc in subsys.intcs %}
    {% set inct_prefix = (intc.inst_name).replace("interconnect_i", "intc").upper() %}
    localparam {{ inct_prefix }}_NMASTER = {{ intc.ext_slv_ports|length }};
    localparam {{ inct_prefix }}_NSLAVE  = {{ intc.ext_mst_ports|length }}; {# Error idx added to slave count #}

    localparam {{ inct_prefix }}_BASE_ADDRESS  = 32'h{{ '%08x' % intc.subsystem_node.inst.addr_offset }};

    localparam {{ inct_prefix }}_NAME  = "{{ inct_prefix }}";

    {# GENERATE SLAVE MEMORY MAP ADDRESSES #}
    {%- for port in intc.ext_mst_ports %}
      {% set port_prefix = (port.module.node.inst_name + "_" + inct_prefix).upper() %}
      localparam logic [31:0] {{ port_prefix }}_START_ADDRESS = {{ inct_prefix }}_BASE_ADDRESS + 32'h{{ '%08x' % port.module.node.inst.addr_offset }};
      localparam logic [31:0] {{ port_prefix }}_SIZE          = 32'h{{ '%08x' % port.module.size }};
      localparam logic [31:0] {{ port_prefix }}_END_ADDRESS   = {{ port_prefix }}_START_ADDRESS + {{ port_prefix }}_SIZE;
      localparam logic [31:0] {{ port_prefix }}_IDX           = 32'd{{ loop.index0 }};
    {%- endfor %}

  {%- endfor %}
  {%- endfor %}


  {%- for subsys in subsystems %}
  {%- for intc in subsys.intcs %}
    {% set inct_prefix = (intc.inst_name).replace("interconnect_i", "intc").upper() %}

  localparam addr_map_rule_t [{{ inct_prefix }}_NSLAVE-1:0] {{ inct_prefix }}_ADDR_RULES = '{
    {# '{ idx: ERROR_IDX, start_addr: ERROR_START_ADDRESS, end_addr: ERROR_END_ADDRESS }, #}
  {%- for port in intc.ext_mst_ports -%}
    {% set port_prefix = (port.module.node.inst_name + "_" + inct_prefix).upper() %}
    '{ idx: {{ port_prefix }}_IDX, start_addr: {{ port_prefix }}_START_ADDRESS, end_addr: {{ port_prefix }}_END_ADDRESS }{% if not loop.last %},{% endif %}
  {%- endfor %}
  };

  {%- endfor %}
  {%- endfor %}

endpackage

