{# Instantiate the subsystem top module with its parameters and input/ouput signals #}
module {{ subsys.getOrigTypeName() }} {% if subsys.hdl_params|length > 0 %} #(
{% for param in subsys.hdl_params %}
    parameter {{ param['name'] }} = {{ param['value'] }}{% if not loop.last%},{% endif %}

{% endfor %}
){% endif %}(
{# Add the explicitely named signals #}
{% for s in subsys.signals %}
    {{ s.verilogDir }} [{{ s.width-1 }}:0] {{ s.name }}{% if (not loop.last) or (subsys.ports|length > 0) %},{% endif %}

{% endfor %}
{# Add the port interface signals #}
{% for intf in subsys.ports %}
    {% set last_bus = loop.last %}

    // Bus: {{ intf.prefix }}{{ intf.type }}
    {% for s in intf.signals %}
    {% set last_sig = loop.last %}
    {{ s.verilogDir }} [{{ s.width-1 }}:0] {{ s.name }}{% if not (last_sig and last_bus) %},{% endif %}

    {% endfor %}
{% endfor %}
);

  // Generated soc address mapping for interconnect generation
  import soc_addr_map_pkg::*;

/*========================================================================================
*========================= Modules signals ===============================================
*========================================================================================*/

{# Define all the signal first #}
{% for module in subsys.modules %}
    {# Define the signals used with internal connections #}
    {% for s in module.signals %}
        {% set sig_name = module.node.inst_name + "_" + s.name %}
        {# If top module has a port with the same name don't create the signal#}
        {% if not subsys.hasSignal(sig_name) %}
    {{ s.data_type }} [{{ s.width-1 }}:0] {{ sig_name }};
        {% endif %}
    {% endfor %}

    {# Define the port/interface signals used to connect the top module with its inner modules #}
    {% for port in module.ports %}
        {% for s in port.signals %}
    wire [{{ s.width-1 }}:0] {{ module.node.inst_name }}_{{ s.name }}; // {{ module.node.inst_name }}  {{ port.type }}
        {% endfor %}

    {% endfor %}
{% endfor %}

/*========================================================================================
*=========================== Interconnects signals =======================================
*========================================================================================*/

{% for intc in subsys.intcs %}
    {% for s in intc.signals %}
        {% set sig_name = intc.node.inst_name + "_" + s.name %}
        {% if not subsys.hasSignal(sig_name) %}
    wire [{{ s.width-1 }}:0] {{ sig_name }};
        {% endif %}
    {% endfor %}

    // Interconnect Ports

    {% for intf in [intc.getSlavePorts()[0]] %}
        {% for s in intf.signals %}
        {% set sig_arr_len = intc.num_ext_slaves  %}
        wire [{{ s.width * sig_arr_len - 1 }}:0] {{ intf.module.node.inst_name }}_{{ s.name }};
        {% endfor %}

    {% endfor %}
    {% for intf in [intc.getMasterPorts()[0]] %}
        {% for s in intf.signals %}
        {% set sig_arr_len = intc.num_ext_masters * (not s.isShared()) or 1 %}
        wire [{{ s.width * sig_arr_len - 1 }}:0] {{ intf.module.node.inst_name }}_{{ s.name }};
        {% endfor %}

    {% endfor %}
{% endfor %}

/*========================================================================================
*=========================== Adapters signals ============================================
*========================================================================================*/

{% for apath in subsys.adapter_paths %}
    {% for adapter in apath.adapters %}
        {% for s in adapter.signals %}
            {% set sig_name = adapter.node.inst_name + "_" + s.name %}
            {% if not subsys.hasSignal(sig_name) %}
    wire [{{ s.width-1 }}:0] {{ sig_name }};
            {% endif %}
        {% endfor %}

        {% set adapter_idx = loop.index %}
        {% if loop.first %}
            {% set prev_adapter = adapter %}
            {% set prev_mst_port = prev_adapter.slv_port %}
        {% else %}
            {% set prev_adapter = apath.adapters[adapter_idx-2] %}
            {% set prev_mst_port = prev_adapter.mst_port %}
        {% endif %}
    // Adapter: {{ adapter.node.inst_name }}
        {% if loop.first %}
            {% for s in adapter.slv_port.signals %}
    wire [{{ s.width - 1}}:0] {{ adapter.node.inst_name }}_{{ s.name }};
            {% endfor %}
        {% endif %}

        {% for s in adapter.mst_port.signals %}
    wire [{{ s.width - 1}}:0] {{ adapter.node.inst_name }}_{{ s.name }};
        {% endfor %}
    {% endfor %}
{% endfor %}


/*========================================================================================
*===================== Modules instantiation =============================================
*========================================================================================*/
{# Instantiate the child modules and subsystems (i.e., modules that are generated) clock(s) and reset(s) #}
{% for module in subsys.getAllModules() %}
{% for s in module.signals %}
{% if s.is_clk %}
    assign {{ module.getSigVerilogName(s) }} = {{ subsys.getMatchingClk(module, s).name }};
{% endif %}
{% if s.is_rst %}
    {% set rst_sig = subsys.getMatchingRst(module, s) %}
    assign {{ module.getSigVerilogName(s) }} = {% if s.activehigh != rst_sig.activehigh %}!{% endif %}{{ rst_sig.name }};
{% endif %}
{% endfor %}

{% endfor %}

{# Instantiate the child modules and subsystems (i.e., modules that are generated) #}
{% for module in subsys.modules %}
    // Instantiate {{ module.node.get_path() }}
    {{ module.getOrigTypeName() }} {% if module.hdl_params|length > 0 %}#(
        {% for param in module.hdl_params %}
        .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
    ) {% endif %}{{ module.node.inst_name }}_i (
        {% for s in module.signals %}
        .{{ s.name }}({{ module.getSigVerilogName(s) }}){% if (not loop.last) or (module.ports|length > 0) %},{% endif %}

        {% endfor %}
        {% for port in module.ports %}
        // {{ port.type }}
            {% set last_port = loop.last %}
            {% for s in port.signals %}
        .{{ s.name }}({{ module.getSigVerilogName(s) }}){% if not (loop.last and last_port) %},{% endif %}

            {% endfor %}
        {% endfor %}
    );

{% endfor %}

/*========================================================================================
*===================== Interconnects instantiation =======================================
*========================================================================================*/

{% for intc in subsys.intcs %}
    // Instantiate interconnect {{ intc.node.inst_name }}
    {{ intc.node.orig_type_name }}{% if intc.hdl_params|length > 0 %} #(
        {% for param in intc.hdl_params %}
        .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
    ) {% endif %} {{ intc.node.inst_name }} (
    {% for s in intc.signals %}
        .{{ s.name }}({{ intc.getSigVerilogName(s) }}),
    {% endfor %}

    {% for intf in [intc.getMasterPorts()[0], intc.getSlavePorts()[0]] %}
        {% set intf_last = loop.last %}
        {% for s in intf.signals %}
        .{{ s.name }}({{ intf.module.node.inst_name }}_{{ s.name }}){% if not (loop.last and intf_last) %},{% endif %}

        {% endfor %}

    {% endfor %}

    );

    {% set intc_slv_port = intc.getSlavePorts()[0] %}
    {% set intc_mst_port = intc.getMasterPorts()[0] %}
    // Interconnect slave ports
    {% for intf in intc.ext_slv_ports %}
        {% set intf_idx = loop.index-1 %}
        {% if intf.module.node == subsys.node %}
            {% set mod_prefix = "" %}
        {% else %}
            {% set mod_prefix = intf.module.node.inst_name + "_" %}
        {% endif %}
        {% for s in intf.signals %}
            {% set sig_idx = intf_idx %}
            {% set intc_sig = intc_slv_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}] = {{ mod_prefix }}{{ s.name }};
            {% elif s.miso %}
    assign {{ mod_prefix }}{{ s.name }} = {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}];
            {% endif %}
        {% endfor %}

    {% endfor %}

    // Interconnect master ports
    {% for intf in intc.ext_mst_ports %}
        {% set intf_idx = loop.index-1 %}
        {% if intf.module.node == subsys.node %}
            {% set mod_prefix = "" %}
        {% else %}
            {% set mod_prefix = intf.module.node.inst_name + "_" %}
        {% endif %}
        {% for s in intf.signals %}
            {% set sig_idx = (not s.isShared())|int * intf_idx %}
            {% set intc_sig = intc_mst_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ mod_prefix }}{{ s.name }} = {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}];
            {% elif s.miso %}
    assign {{ intc.node.inst_name }}_{{ intc_sig.name }}[{{ sig_idx  *  s.width }} +: {{ s.width }}] = {{ mod_prefix }}{{ s.name }};
            {% endif %}
        {% endfor %}

    {% endfor %}


{% endfor %}

/*========================================================================================
*===================== Adapters instantiation ============================================
*========================================================================================*/

{% for apath in subsys.adapter_paths %}
    {% for adapter in apath.adapters %}
        {% set adapter_idx = loop.index %}
        {% if loop.first %}
            {% set prev_adapter = adapter %}
            {% set prev_mst_port = prev_adapter.slv_port %}
        {% else %}
            {% set prev_adapter = apath.adapters[adapter_idx-2] %}
            {% set prev_mst_port = prev_adapter.mst_port %}
        {% endif %}
    // Instantiate Adapter: {{ adapter.node.inst_name }}

    {{ adapter.getOrigTypeName() }} {% if adapter.hdl_params|length > 0 %}#(
        {% for param in adapter.hdl_params %}
            .{{ param['name'] }}({{ param['value'] }}){% if not loop.last %},{% endif %}

        {% endfor %}
        ) {% endif %}{{ adapter.node.inst_name }} (
        {% for s in adapter.signals %}
            .{{ s.name }}({{ adapter.getSigVerilogName(s) }}){% if (not loop.last) or (adapter.intfs|length > 0) %},{% endif %}

        {% endfor %}

        {% set slv_intf = apath.intfChain[adapter_idx-1] %}
        {% for s in slv_intf.signals %}
        .{{ adapter.slv_port.findSignal(s).name }}({{ prev_adapter.node.inst_name }}_{{ prev_mst_port.findSignal(s).name }}),
        {% endfor %}

        {% for s in apath.intfChain[adapter_idx].signals %}
        .{{ adapter.mst_port.findSignal(s).name }}({{ adapter.node.inst_name}}_{{ adapter.mst_port.findSignal(s).name }}){% if not loop.last %},{% endif %}

        {% endfor %}

    );

    {% if loop.last %}
        {% for s in apath.adapt_to.signals %}
            {% set adapter_sig = adapter.mst_port.findSignal(s) %}
            {% if s.mosi %}
    assign {{ apath.adapt_to.module.node.inst_name }}_{{ s.name }} = {{ adapter.node.inst_name }}_{{ adapter_sig.name }};
            {% elif s.miso %}
    assign {{ adapter.node.inst_name }}_{{ adapter_sig.name }} = {{ apath.adapt_to.module.node.inst_name }}_{{ s.name }};
            {% endif %}
        {% endfor %}

    {% endif %}

    {% endfor %}

{% endfor %}

/*========================================================================================
*================ Signal connections from path property ==================================
*========================================================================================*/

{% for s in subsys.signals %}
    {% set sig_path = s.node.get_property("path", default="")|path_conv %}
    {% if (sig_path != "") and (sig_path != s.name) %}
        {% if s.output %}
    assign {{ s.name }} = {{ sig_path }};
        {% elif s.input %}
    assign {{ sig_path }} = {{ s.name }} ;
        {% endif %}
    {% endif %}
{% endfor %}

/*========================================================================================
*===================== Injected Verilog files ============================================
*========================================================================================*/

{% for f in inj_f %}
    {% if use_include %}
    `include "{{ f|get_file_name }}";
    {% else %}
    // Content of {{ f }}

{{ f|get_file_content }}
    {% endif %}

{% endfor %}

endmodule
